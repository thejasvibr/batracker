.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_prototyping_plot_schau_robinson.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_prototyping_plot_schau_robinson.py:


Prototyping module: Schau & Robinson 1987
=========================================
This module contains test examples to check if things are working and if they are 
accurate.


.. code-block:: default


    import numpy as np 
    import scipy.spatial as spatial

    # this needs to be fixed at some point...
    import sys 
    sys.path.append('../../')
    from localisation import schau_robinson_1987 as sr1987







Let's imagine a 4 channel array somewhere with a couple of sound sources around it.
To check if my Schau & Robinson implementation is working I need a couple of things
1) range diffferences between the mics to sources
2) array geometry


.. code-block:: default


    # M matrix
    raw_array_geom = np.array([[0,0,1],
                               [0,1,0],
                               [2,0,0],
                               [0.5,0.5,0]]) # each row is one mic

    array_geom_ref_m4 = raw_array_geom-raw_array_geom[-1,:]
    M = array_geom_ref_m4[:-1,:]









.. code-block:: default

    source_position = np.random.rand(3)*np.random.choice([1,10,100],1)
    source_position_ref_m4 = source_position-raw_array_geom[-1,:]
    x = source_position_ref_m4.reshape(3,1)










.. code-block:: default

    D_matrix = np.apply_along_axis(spatial.distance.euclidean, 1,array_geom_ref_m4,
                                   source_position_ref_m4)








.. code-block:: default

    d_matrix = D_matrix - D_matrix[-1]
    d = d_matrix[:-1].reshape(3,1)











.. code-block:: default

    R_matrix = np.apply_along_axis(spatial.distance.euclidean, 1,array_geom_ref_m4,
                                   np.zeros(3))

    R = (R_matrix[:-1]).reshape(3,1)










.. code-block:: default

    Delta = R**2-d**2











.. code-block:: default

    M_inv = np.linalg.inv(M)
    Minv_transp_into_Minv = (M_inv.T).dot(M_inv)

    a = 4 - 4*(d.T).dot(Minv_transp_into_Minv.dot(d))

    b_leftterm = 2*(d.T).dot(Minv_transp_into_Minv.dot(Delta))
    b_rightterm = 2*(Delta.T).dot(Minv_transp_into_Minv.dot(d))
    b = b_leftterm + b_rightterm 

    c = -( (Delta.T).dot(Minv_transp_into_Minv.dot(Delta)))

    num1 = -b + np.sqrt(b**2-4*a*c)
    num2 = -b - np.sqrt(b**2-4*a*c)
    denom = 2*a

    Rs1 = num1/denom
    Rs2 = num2/denom
    Rs = (Rs1, Rs2)
    #print(Rs, D_matrix[-1])

    x_solutions = []
    for R_solution in Rs:
        x = 0.5*M_inv.dot(Delta-2*R_solution*d)
        x_solutions.append(x)

    # final coordinates in real world frame of reference
    real_world_locations = []
    for each in x_solutions:
        real_world_locations.append(each.flatten()+raw_array_geom[-1,:].T)
    #print(real_world_locations)

    print(f'\n Expected \n: {real_world_locations}')






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


     Expected 
    : [array([9.29390355, 5.74736256, 4.78577311]), array([0.33305026, 1.47315346, 1.61264748])]





.. code-block:: default


    solutions = sr1987.schau_robinson_solution(raw_array_geom, d)
    print(f'\n Obtained \n: {solutions}')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


     Obtained 
    : [array([9.29390355, 5.74736256, 4.78577311]), array([0.33305026, 1.47315346, 1.61264748])]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.103 seconds)


.. _sphx_glr_download_prototyping_plot_schau_robinson.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_schau_robinson.py <plot_schau_robinson.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_schau_robinson.ipynb <plot_schau_robinson.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
